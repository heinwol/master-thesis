#import "./template.typ": thmrules, template, definition, theorem, proof, claim, code, lemma, corollary, remark, turn-on-first-line-indentation as fli, indent

#let sp = h(0.5em)

#let state_dict(d) = {
  // assert(type(d) == dictionary)
  ${#(d
    .pairs()
    .map(((k, v)) => $bold(#(k+":")) #v$)
    .join(",")
    )}$
}

#let generated_image(subpath) = {
  // assert(type(subpath) == str)
  (..args) => image("../assets/generated/" + subpath, ..args)
}

#let image_by_hand(subpath) = {
  // assert(type(subpath) == str)
  (..args) => image("../assets/images/" + subpath, ..args)
}

#let varnothing = $text(font: "Fira Sans", nothing)$

#let comment(cnt) = text(fill: red, cnt)

#let quo(l, r) = {
  $#l"/"#r$
}
#let esq(u, eqv_rel: none) = $[#u]_#( if eqv_rel == none {"~"} else {eqv_rel})$

#let hi = h(indent)

#let Stab = $"Stab"$
#let Aut = $"Aut"$

#show: thmrules
#show: template

////////////////////////
// Document begins!
////////////////////////
#outline(title: [Содержание])

= ВВЕДЕНИЕ <nonum>

Многие проблемы из разных предметных областей формулируются и решаются с использованием сетевых моделей. Изучение различных динамических процессов в сетях, как стохастических, так и детерминированных, часто требует инструментов однородных и неоднородных цепей Маркова. Работа была посвящена исследованию модели ресурсной сети с особым видом топологии графа. Проблема изучения ресурсных сетей относится к пересечению нескольких классов диффузионных моделей. Первый содержит различные модели случайного блуждания. Это большое поле, включающее случайные блуждания по решеткам по конечносвязным неориентированным графам, случайные блуждания с локальными смещениями и т.д. В @Gutierrez2021 задачи оптимизации потоков и нахождения кратчайших путей были решены с использованием анализа функций большого отклонения случайных блужданий. Нелинейная диффузия рассматривалась в @Falco2022. Нелинейность представляет для нас особый интерес, поскольку модель ресурсной сети, также, в общем, нелинейна. Это достигается за счет порогового переключения между правилами работы вершин. Некоторые вершины при определенных условиях переключаются на нелинейное правило и начинают функционировать аналогично вершинам в модели игры с выбиванием фишек (chip-firing). Эта модель была предложена довольно давно @Bjoerner1992, однако она не утратила своей актуальности и в настоящее время. Игра с выбрасыванием фишек часто используется для описания модели песчаной кучи или лавины и аналогичных процессов самоорганизующейся критичности.

В дополнение к описанию физических процессов распространения в сетях, аналогичные модели появляются при моделировании информационных процессов, в частности, динамики мнений и достижение консенсуса в многоагентных системах. В настоящее время классическая модель DeGroot имеет множество различных модификаций. Однородные и неоднородные цепи Маркова являются одним из основных инструментов для описания систем, процессов и устройств с несколькими состояниями.

Модель ресурсной сети представляет собой нелинейную диффузионную модель, в которой по вершинам ориентированного взвешенного графа распределяется некоторый безразмерный бесконечно разделимый ресурс в соответствии с двумя правилами в зависимости от количества ресурса на каждом временном шаге. Время в модели дискретно; все вершины работают параллельно. Веса ребер обозначают их пропускную способность. Вершины могут хранить неограниченное количество ресурсов. Если в момент времени t объем ресурсов в вершине превышает общую пропускную способность ее исходящих дуг, эта вершина отправляет полную пропускную способность по каждой дуге; в противном случае он выдает весь свой ресурс, деля его пропорционально пропускной способности дуг. Нелинейность возникает в модели, когда общий ресурс превышает пороговое значение, из-за чего разные вершины сети начинают функционировать в соответствии с разными правилами.

Ресурсная сеть была впервые предложена в @Kuznetsov2009. С тех пор возникла теория ресурсных сетей, ее краткое описание можно найти в @ЖИЛЯКОВА2013. В этой статье также описываются две двухпороговые модификации стандартной модели. Некоторые другие модели, основанные на стандартной сети ресурсов, были разработаны другими исследовательскими группами @Скороходов2016 @Скороходов2023.

= ОСНОВНАЯ ЧАСТЬ

== Модель ресурсной сети

Ресурсная сеть представляет собой нелинейную модель потока, работающую в дискретном времени. Вершины сети синхронно перераспределяют некоторый бесконечно делимый ресурс. На каждом временном шаге каждая вершина отправляет ресурс всем своим соседям по одному из двух правил с пороговым переключением. Выбор правила зависит от количества ресурса в вершине. Если ресурс в вершине больше, чем общая пропускная способность ее исходящих ребер, он отправляет полную пропускную способность каждому ребру; в противном случае вершина отдает весь ресурс, распределяя его пропорционально пропускной способности исходящих ребер. Вершины имеют неограниченные емкости.

Структура сети задается ориентированным взвешенным графом $G = (V , E)$. Ребра $e_(i j) = (v_i , v_j) in E$ имеют постоянные во времени неотрицательные веса $r_(i j)$, определяющие пропускные способности соответствующих ребер.

Матрица $R = (r_(i j))_(n times n)$ -- *матрица пропускной способности*, $r_(i j) in R_(+)$. Если ребро $e_(i j)$ существует, то $r_(i j) > 0$, иначе $r_(i j) = 0$.

Динамические свойства сети определяются правилами перераспределения ресурсов, а также количеством общего ресурса и его распределением по вершинам.

#hi *Ресурсы* $q_i (t)$ -- неотрицательные числа, присвоенные вершинам $v_i , $ \ $i in overline(1"," n) ,$ и изменяющиеся в дискретном времени $t$.

#hi *Состояние* $Q (t)$ c на временном шаге t представляет собой вектор значений ресурсов в каждой вершине:

$ Q (t) = (q_1 (t) , dots.h , q_n (t)) . $ <nonum>

Пусть W -- общий ресурс в сети. В сети выполняется *закон сохранения*: ресурс не поступает и не уходит.

Значения

$
  r_i^(i n) = sum_(j = 1)^n r_(j i) sp #[и] sp r_i^("out") = sum_(j = 1)^n r_(i j)
$ <nonum>

-- *суммарные входящие и исходящие пропускные способности вершины $v_i$* соответственно. Пропускная способность петли, если она существует, включается в обе суммы.

На временном шаге t вершина $v_i$ отправляет соседней вершине $v_j$ через ребро $e_(i j)$ количество ресурса $f_(i j) (t)$, равное:

$
  cases(
  f_(i j) (t) = r_(i j) "," & upright("if") q_i ( t ) > r_i^("out") - "правило" 1";",
  r_(i j) / r_i^("out") q_i (t) ","   & upright("if")  q_i (
    t
  ) lt.eq r_i^("out") -  "правило"  2.
)
$ <nonum>

Другими словами, если количество ресурсов вершины превышает суммарную пропускную способность исходящих ребер, то она работает по правилу 1. В этом случае поток в каждом ребре равен его пропускной способности: $f_(i j) (t) = r_(i j)$; в сумме вершина отправляет свою общую выходную пропускную способность:

$ sum_(j = 1)^n f_(i j) (t) = sum_(j = 1)^n r_(i j) = r_i^("out") . $ <nonum>

Если вершина имеет недостаточное количество ресурса, то в соответствии с правилом 2 она отдает весь свой ресурс, распределяя его на все исходящие ребра пропорционально их пропускным способностям. В таком случае

$ sum_(j = 1)^n f_(i j) (t) = q_i (t) . $ <nonum>

#let state_1 = ("0": 8, "1": 1, "2": 0)

Пример ресурсной сети $"network"_1$ можно видеть на @fig:basic_network_1. Множество вершин здесь есть $V = {0, 1, 2}$, а метки ребер обозначают соответствующие веса в графе $G$. На @fig:basic_network_2 показано некоторое состояние сети с ресурсами #state_dict(state_1). При данном способе визуализации вершины имеют разный размер в зависимости от количества имеющегося в них ресурса. Более того, вершины $v_i$, в которых ресурс не меньше порогового значения (т.е. $q_i >= r_i^("out")$), окрашены в фиолетовый цвет, а остальные -- в салатовый.

#grid(
  columns: 2,
  align: bottom,
  [
    #figure(
      caption: [Ресурсная сеть $"network"_1$.],
      generated_image("basic_network/plot.svg")(width: 75%),
    ) <fig:basic_network_1>
  ],
  [
    #figure(
      caption: [Состояние сети $"network"_1$ при #state_dict(state_1).],
      generated_image("basic_network/sim.svg")(),
    ) <fig:basic_network_2>
  ],
)

Матрица пропускной способности $"network"_1$ приведена в формуле @eq:basic_network_R, а ее стохастическая матрица -- в формуле @eq:basic_network_R_1. Можно убедиться, что сумма значений в каждой строке стохастической матрицы равна единице.

#grid(
  columns: 2,
  [
    $
      R = mat(
        0, 3, 1;
        4, 1, 0;
        2, 2, 0;
    )","
    $ <eq:basic_network_R>
  ],
  [
    $
      R' = mat(
      0   , 0.75, 0.25;
      0.8 , 0.2 , 0   ;
      0.5 , 0.5 , 0   ;
    )"."
    $ <eq:basic_network_R_1>
  ],
)

Вектор $Q^(\*) = (q_1^(\*) , dots.h , q_n^(\*)) ,$ где

$ lim_(t arrow.r oo) q_i (t) = q_i^(*) , i = overline(1"," n) , $ <nonum>

(если существует) называется #emph[предельным состоянием] сети.

Если предельное состояние существует, его можно достичь за конечное время или асимптотически; это зависит от топологии сети и начального распределения ресурсов. Предельное состояние всегда устойчиво. Это означает, что если $Q (t) = Q^(\*) ,$ то $Q (t) = Q (t + 1) = dots.h$

В \[28\] было доказано, что предельное состояние существует для всех топологий ресурсных сетей, за исключением циклических сетей (сетей, в которых НОД длин всех циклов больше 1).

Пусть общий сетевой ресурс W настолько мал, что все вершины на каждом временном шаге работают по правилу 2. В этом случае на каждом временном шаге каждая вершина отдает весь ресурс. Таким образом, в матричной форме работа сети описывается формулой:

$ Q (t + 1) = Q (t) R^prime , $ <nonum>

$
  R^prime = mat(delim: "(", r_11 / r_1^("out"), dots.h.c, r_(1 n) / r_1^("out"); dots.v, dots.down, dots.v; r_(n 1) / r_n^("out"), dots.h.c, r_(n n) / r_n^("out")).
$ <nonum>

Пусть матрица $R$ такова, что при любом распределении всего ресурса $W = 1$ вся сеть работает по правилу 2. В \[28\] доказано, что в этом случае сеть описывается однородной цепью Маркова. В частности, если сеть не циклическая, то предельное состояние всегда существует и единственно.

#claim[
  Регулярные ресурсные сети имеют глобальную характеристику: пороговое значение общего ресурса $ W = T$:

  - Если $W < T$, то существует конечное время $t$ такое, что при $t > t'$ все вершины будут работать по правилу 2;

  - Если $W = T$, все вершины будут работать по правилу 2 -- за конечное время или асимптотически, в зависимости от начального распределения ресурсов;

  - Если $W > T$, то существует момент времени $t''$ такой, что при $t > t''$ хотя бы одна вершина будет работать по правилу 1.
]

Ресурс $W  lt.eq T$ называется *малым*; ресурс $W > T$ называется *большим*.

#claim[
  Если $W < T$, то с некоторого временного шага $t'$ все вершины отдают свой ресурс по правилу 2, и все приведенные выше результаты, полученные при $W = 1$, также будут правильными.
]

Доказано, что способность вершины стабильно функционировать по правилу 1 зависит от топологии и весов ребер графа и не зависит от начального распределения ресурсов. Вершины, способные накапливать излишки ресурсов (ресурсы, превышающие T), называются аттракторами. В @ЖИЛЯКОВА2013 сформулирован и доказан критерий аттрактивности вершины.

== Описание модели и связь с неоднородными цепями Маркова

В работе предлагается метод исследования функционирования ресурсных сетей с большим ресурсом с использованием неоднородных цепей Маркова, т.е. цепей Маркова с динамически изменяющимися стохастическими матрицами, были получены новые результаты.

Рассмотрим ресурсную сеть с двумя сильно связанными компонентами, т.е. такую сеть, в которой есть только ребра от первой сильно связной компоненты (называемой *переходной* компонентой с $n_1$ вершинами) до второй (называемой *финальной*, с $n_2$ вершин). Пусть $n$ -- общее количество вершин в сети (@fig:two_component_net).

#figure(
  caption: [Двухкомпонентная ресурсная сеть. Вершины ($v_1$ - $v_4$) принадлежат переходной составляющей; вершины ($v_5$ - $v_9$) образуют финальную компоненту. $n_1 = 4 , n_2 = 5 , n = 9$.],
  image_by_hand("sth.png")(width: 80%),
) <fig:two_component_net>

// . <nonum>

#theorem[
  Существует конечный момент времени $t'$ такой, что при #box[$t > t'$] все вершины переходной компоненты работают по правилу 2.
]

Теорема 1 утверждает, что исследование всякого возможно распределения ресурса в переходной компоненте рано или поздно сводится к линейному случаю. Следующая теорема показывает, как ведет себя сеть в линейном случае.

#theorem[
  Если вся двухкомпонентная сеть целиком работает по правилу 2, то общее количество ресурса в переходной компоненте стремится к нулю при стремлении времени к бесконечности.
]

#theorem[
  В двухкомпонентной ресурсной сети при любом значении и начальном распределении общего ресурса общее количество ресурса в переходной компоненте стремится к нулю при стремлении времени к бесконечности.
]

Таким образом, для любого суммарного ресурса и любого его начального распределения в двухкомпонентной ресурсной сети весь ресурс перейдет в финальную компоненту.

Согласно описанному выше, если ресурсная сеть регулярна, то в случае малого ресурса существует единственное предельное состояние, не зависящее от начального распределения. В случае большого ресурса также всегда существует предельное состояние, но если вершин аттрактора несколько, то предельное состояние может быть не единственным для каждого начального состояния. Вопрос в том, можно ли провести аналогию со случаем двухкомпонентной сети. Следующие теоремы отвечают на этот вопрос.

Предположим, что финальная компонента ресурсной сети является регулярной. Пусть T будет пороговым значением общего ресурса для финальной компоненты. Пусть сеть задана матрицей:

$ R = mat(delim: "[", R_1, R_2; 0, R_3). $ <nonum>

#theorem[
  Если $W  lt.eq T$, то существует единственное предельное состояние, не зависящее ни от начального распределения полного ресурса $Q (0)$, ни от блоков $R_1$ и $R_2$ матрицы емкости $R$.
]

#theorem[
  Если $W  >  T$, то для любого начального состояния $Q(0)$ существует предельное состояние $Q^(\*)$. Если, кроме того, финальная компонента содержит только один аттрактор, то это предельное состояние зависит только от $W$, т. е. не зависит ни от начального распределения полного ресурса, ни от блоков $R_1$ и $R_2$ матрицы емкости $ R$.
]

Установим теперь связь модели ресурсной сети с неоднородными цепями Маркова.

В общем случае преобразование ресурсной сети с начальным вектором состояния $Q (0)$ и матрицей пропускной способности $R$ можно записать следующим образом:

$
  R arrow.r R (t) = {r_(i j) (t)}_(i , j = overline(1"," n));
$ <nonum>

$
  cases(
  r_(i j) (t) = r_(i i) + (q_i (t) - r_i^("out"))"," & upright("если ") q_i (t) > r_i^("out")  and i = j";",
  r_(i j) "," &  "иначе".
)
$ <nonum>

Здесь, $forall t gt.eq 0 sp Q (t + 1) = Q (t) R^prime (t)$, или

$ Q (t + 1) = Q (0) product_(i = 0)^t R^prime (i) . $ <nonum>

В таком случае предельное состояние сети (если оно существует) может быть записано так:

$
  Q^(\*) = Q (0) lim_(t arrow.r oo) product_(i = 0)^t R^prime (i) = Q (0) R^(prime oo),
$ <nonum>

где $ R^prime^oo  =  bold(1) dot  Q^(1**)$ ($Q^(1**)$ -- некоторый вектор респределения ресурса с $W = 1$).

Следующая теорема устанавливает связь модели двухкомпонентной ресурсной сети с неоднородными цепями Маркова в явном виде:

#theorem[
  Для двухкомпонентной ресурсной сети, если $W  >  T$, то для любого начального состояния неоднородная цепь Маркова со стохастическими матрицами $R^prime (t)$ сильно эргодична.
]

= ЗАКЛЮЧЕНИЕ <nonum>

Нами было введено понятие ресурсных сетей с прибывающим ресурсом, которые являются частным случаем неэргодических ресурсных сетей. Были исследованы основные свойства таких сетей. Оказалось, что весь ресурс со временем утекает из переходной компоненты, так что с какого-то момента ее поведение описывается линейной системой. С другой стороны, были указаны случаи, при которых поведение финальной компоненты начиная с какого-то момента качественно не меняется от воздействия переходной компоненты. Так или иначе, было показано, что предельное состояние в сети существует всегда. Была проведена связь с цепями Маркова.

// Нами были исследованы симметрии губковых сетей и связи между автоморфизами графов и динамических систем ресурсных сетей, порождающихся этими графами. С одной стороны, мы установили, что несмотря на регулярность, губковые сети теряют много своих симметрий относительно замощений плоскости, их порождающих. Вместе с тем было дано полное описание групп автоморфизмов губковых сетей (в том числе и в случае, когда "верх" и "низ" симметричны друг относительно друга). Было введено понятие факторизации ресурсных сетей и исследованы базовые ее свойства: в каких ситуациях сеть факторизуется идеально, а в каких нет? С помощью факторизации мы смогли из обыкновенных губковых сетей строить губковые сети на цилиндре, обладающие намного большим набором симметрий. Группы автоморфизмов таких сетей также были описаны полностью. Наконец, мы установили, что каждая симметрия графа ресурсной сети порождает симметрию ее как динамической системы. Полученные утверждения можно применять для облегчения моделирования и уменьшения размера анализируемой сети.

// Проведенное исследование открывает широкий простор для дальнейших изысканий. С одной стороны, можно ставить вопросы о протекании ресурса через губковую сеть, например:

// - При данных параметрах сети (столбцы, строки, вес всех типов ребер), каково минимальное количество ресурса, которое может быть помещено в верхние вершины так, чтобы ресурс дотек до стоковых вершин? Каково должно быть распределение этого ресурса?
// - При данном начальном распределении ресурса в верхних вершинах, какую форму будет иметь "след" данного ресурса в пределе, если ресурса не хватит на то, чтобы покрыть все "потребности" жадных вершин? Какова зависимость ширины и глубины следа от параметров сети?

// С другой стороны, можно исследовать возможность обобщения полученных результатов с губковых сетей на более общие динамические модели на графах, для которых симметрии графа и динамической системы будут соотноситься так же, как и в случае ресурсных сетей. Вероятно, можно найти такое обобщение, под которое подпадут и цепи Маркова, и ресурсные сети, и другие модели, в которых состояние вершины в следующий момент времени зависит лишь от текущего ее состояния и состояния всех смежных с ней вершин.

#[
  #let nbsp = sym.space.nobreak

  // HAHAHA, that's a dirty hack, but works in simple cases
  #let re = regex(`#([\w\d\-_]+)\[(.+)\]`.text)
  #show re: it => {
    let (func, text) = it.text.match(re).captures
    eval("#" + func + "[" + text + "]", mode: "markup")
  }

  #let re = regex(`(\d+)–(\d+)`.text)
  #show re: it => {
    let (l, r) = it.text.match(re).captures
    [#nbsp#box[#l–#r]]
  }

  #bibliography(
    "../literature/sn_literature.bib",
    title: [СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ],
    style: "../literature/gost-r-7-0-5-2008-numeric.csl",
  )
]
\
